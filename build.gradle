buildscript {
    dependencies {
        classpath("com.google.cloud.tools:appengine-gradle-plugin:2.3.0")
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.sonarqube' version '2.7'
    id 'jacoco'
    id 'java'
}

allprojects {
    group = 'my.packagename'
    sourceCompatibility = '1.8'

    repositories {
        mavenLocal()
        jcenter()
    }

}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        implementation 'ch.qos.logback:logback-classic'
        implementation 'ch.qos.logback:logback-core'
        implementation 'org.slf4j:slf4j-api'
        implementation 'org.springframework:spring-context'
        implementation 'org.springframework:spring-core'
        implementation 'org.springframework:spring-context-support'
        implementation 'org.projectlombok:lombok:1.18.10'
        implementation 'org.mapstruct:mapstruct:1.3.1.Final'

        annotationProcessor 'org.projectlombok:lombok:1.18.10'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")
        }
    }

    sonarqube {
        properties {
            property 'sonar.sources', 'src/main/java'
            property 'sonar.exclusions', '**/*Test*/**'
        }
    }

    test {
        useJUnitPlatform()
        jacoco {
            //append = false
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
            classDumpDir = file("$buildDir/jacoco/classpathdumps")
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.7
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test.finalizedBy jacocoTestReport
}